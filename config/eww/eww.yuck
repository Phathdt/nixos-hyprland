(defwindow settings-panel
  :monitor 0
  :geometry (geometry :x "0px"
    :y "0px"
    :anchor "top left"
    :width "100%"
  :height "100%")
  :stacking "overlay"
  :reserve (struts :distance "0px" :side "top")
  :windowtype "dock"
  :wm-ignore true
  :focusable true
  (eventbox :onclick "eww close settings-panel"
    :class "settings-overlay"
    (box :class "settings-container"
      :halign "end"
      :valign "start"
      (eventbox :onclick ""
        (settings-content)
      )
    )
  )
)

(defwidget settings-content []
  (box :class "settings-panel"
    :orientation "v"
    :space-evenly false
    :spacing 16
    (box :class "settings-content-wrapper"
      :orientation "v"
      :space-evenly false
      :spacing 16
      (box :class "panel-header"
        (label :class "panel-title"
          :text "Quick Settings"
        :halign "start")
      )
      (power-controls)
      (connectivity-section)
      (audio-section)
      (music-section)
      (notifications-section)
    )
  )
)

(defwidget power-controls []
  (box :class "power-section"
    :orientation "h"
    :space-evenly true
    :spacing 8
    (button :class "power-btn shutdown"
      :onclick "systemctl poweroff"
      :tooltip "Shutdown"
    "⏻")
    (button :class "power-btn dnd"
      :onclick "swaync-client -dn"
      :tooltip "Do Not Disturb"
    "󰂛")
  )
)

(defwidget connectivity-section []
  (box :class "connectivity-section"
    :orientation "v"
    :space-evenly false
    :spacing 8
    (wifi-widget)
    (bluetooth-widget)
  )
)

(defwidget wifi-widget []
  (box :class "connectivity-item wifi ${wifi-status.class}"
    :orientation "h"
    :space-evenly false
    :spacing 12
    (box :class "icon"
    "${wifi-status.icon}")
    (box :orientation "v"
      :space-evenly false
      :halign "start"
      :hexpand true
      (label :class "title"
        :text "Wi-Fi"
      :halign "start")
      (label :class "status"
        :text "${wifi-status.text}"
      :halign "start")
    )
    (box :orientation "h"
      :space-evenly false
      :spacing 8
      :halign "end"
      (button :class "toggle-switch ${wifi-status.enabled ? 'enabled' : 'disabled'}"
        :onclick "~/.config/scripts/toggle-wifi.sh"
        :tooltip "${wifi-status.enabled ? 'Disable Wi-Fi' : 'Enable Wi-Fi'}"
      "${wifi-status.enabled ? '󰖪' : '󰖭'}")
      (button :class "settings-btn"
        :onclick "nm-connection-editor & eww close settings-panel"
        :tooltip "Network Settings"
      "󰒓")
    )
  )
)

(defwidget bluetooth-widget []
  (box :class "connectivity-item bluetooth ${bluetooth-status.class}"
    :orientation "h"
    :space-evenly false
    :spacing 12
    (box :class "icon"
    "${bluetooth-status.icon}")
    (box :orientation "v"
      :space-evenly false
      :halign "start"
      :hexpand true
      (label :class "title"
        :text "Bluetooth"
      :halign "start")
      (label :class "status"
        :text "${bluetooth-status.text}"
      :halign "start")
    )
    (box :orientation "h"
      :space-evenly false
      :spacing 8
      :halign "end"
      (button :class "toggle-switch ${bluetooth-status.enabled ? 'enabled' : 'disabled'}"
        :onclick "~/.config/scripts/toggle-bluetooth.sh"
        :tooltip "${bluetooth-status.enabled ? 'Disable Bluetooth' : 'Enable Bluetooth'}"
      "${bluetooth-status.enabled ? '󰂯' : '󰂲'}")
      (button :class "settings-btn"
        :onclick "blueman-manager & eww close settings-panel"
        :tooltip "Bluetooth Settings"
      "󰒓")
    )
  )
)

(defwidget audio-section []
  (box :class "audio-section"
    :orientation "v"
    :space-evenly false
    :spacing 8
    (box :class "audio-controls"
      :orientation "h"
      :space-evenly false
      :spacing 12
      (button :class "mic-toggle ${mic-muted ? 'muted' : 'active'}"
        :onclick "~/.config/eww/scripts/toggle-mic.sh"
        :tooltip "${mic-muted ? 'Unmute Microphone' : 'Mute Microphone'}"
      "${mic-muted ? '󰍭' : '󰍬'}")
      (label :class "mic-label"
        :text "${mic-muted ? 'Microphone Muted' : 'Microphone Active'}"
        :halign "start"
      :hexpand true)
    )
    (box :class "volume-control"
      :orientation "h"
      :space-evenly false
      :spacing 12
      (button :class "volume-icon"
        :onclick "pavucontrol"
      "${volume-icon}")
      (scale :class "volume-slider"
        :value volume
        :min 0
        :max 100
        :onchange "~/.config/eww/scripts/set-volume.sh {}"
      :hexpand true)
      (label :class "volume-label"
      :text "${volume}%")
    )
  )
)

(defwidget music-section []
  (box :class "music-section ${music-playing ? 'playing' : 'idle'}"
    :orientation "v"
    :space-evenly false
    :spacing 8
    :visible "${music-title != ''}"
    (box :class "music-header"
      :orientation "h"
      :space-evenly false
      :spacing 8
      (label :class "music-icon"
      :text "${music-icon}")
      (label :class "music-app"
        :text "${music-app}"
        :halign "start"
      :hexpand true)
    )
    (box :class "music-content"
      :orientation "h"
      :space-evenly false
      :spacing 12
      (image :class "music-thumbnail"
        :path "${music-arturl != '' ? music-arturl : ''}"
        :image-width 80
        :image-height 80
      :visible "${music-arturl != ''}")
      (box :class "music-info"
        :orientation "v"
        :space-evenly false
        :hexpand true
        (label :class "music-title"
          :text "${music-title}"
          :halign "start"
        :limit-width 35)
        (label :class "music-artist"
          :text "${music-artist}"
          :halign "start"
        :limit-width 35)
      )
    )
    (box :class "music-controls"
      :orientation "h"
      :space-evenly true
      :spacing 8
      (button :class "music-btn"
        :onclick "playerctl previous"
      "󰒮")
      (button :class "music-btn play-pause"
        :onclick "playerctl play-pause"
      "${music-playing ? '󰏤' : '󰐊'}")
      (button :class "music-btn"
        :onclick "playerctl next"
      "󰒭")
    )
  )
)

(defwidget notifications-section []
  (box :class "notifications-section"
    :orientation "v"
    :space-evenly false
    (box :class "notifications-header"
      :orientation "h"
      :space-evenly false
      (label :class "notifications-title"
        :text "Notifications"
        :halign "start"
      :hexpand true)
      (button :class "clear-notifications"
        :onclick "swaync-client -C"
        :tooltip "Clear All"
      "󰎟")
    )
    (scroll :class "notifications-list"
      :height 200
      :vscroll true
      (box :orientation "v"
        :space-evenly false
        :spacing 4
        (for notification in notifications
          (notification-item :notification notification)
        )
      )
    )
  )
)

(defwidget notification-item [notification]
  (box :class "notification-item"
    :orientation "v"
    :space-evenly false
    :spacing 4
    (box :class "notification-header"
      :orientation "h"
      :space-evenly false
      (label :class "notification-app"
        :text "${notification.app}"
        :halign "start"
      :hexpand true)
      (label :class "notification-time"
        :text "${notification.time}"
      :halign "end")
    )
    (label :class "notification-summary"
      :text "${notification.summary}"
      :halign "start"
    :wrap true)
    (label :class "notification-body"
      :text "${notification.body}"
      :halign "start"
      :wrap true
    :visible "${notification.body != ''}")
  )
)

(defpoll wifi-status :interval "2s"
"~/.config/eww/scripts/get-wifi-status.sh")

(defpoll bluetooth-status :interval "2s"
"~/.config/eww/scripts/get-bluetooth-status.sh")

(defpoll volume :interval "1s"
"~/.config/eww/scripts/get-volume.sh")

(defpoll volume-icon :interval "1s"
"~/.config/eww/scripts/get-volume-icon.sh")

(defpoll mic-muted :interval "1s"
"~/.config/eww/scripts/get-mic-status.sh")

(defpoll music-info :interval "1s"
"~/.config/eww/scripts/get-music-info.sh")

(deflisten music-playing :initial "false"
"~/.config/eww/scripts/get-music-info.sh | jq -r '.playing'")
(deflisten music-title :initial ""
"~/.config/eww/scripts/get-music-info.sh | jq -r '.title'")
(deflisten music-artist :initial ""
"~/.config/eww/scripts/get-music-info.sh | jq -r '.artist'")
(deflisten music-app :initial ""
"~/.config/eww/scripts/get-music-info.sh | jq -r '.app'")
(deflisten music-icon :initial ""
"~/.config/eww/scripts/get-music-info.sh | jq -r '.icon'")
(deflisten music-arturl :initial ""
"~/.config/eww/scripts/get-music-info.sh | jq -r '.artUrl'")

(defpoll notifications :interval "2s"
"~/.config/eww/scripts/get-notifications.sh")
